x-sr.ht-service: &srht-service
  configs:
    - source: sr.ht-config
      target: /etc/sr.ht/config.ini
    - source: sr.ht-pgp-pubkey
      target: /etc/sr.ht/pgp/pubkey.asc
    - source: sr.ht-pgp-privkey
      target: /etc/sr.ht/pgp/privkey.asc

name: srht

configs:
  sr.ht-config:
    file: config.ini
  sr.ht-pgp-pubkey:
    file: pgp/pubkey.asc
  sr.ht-pgp-privkey:
    file: pgp/privkey.asc

volumes:
  postgres-data:

services:
  redis:
    image: "redis:alpine"
  postgres:
    image: "postgres:alpine"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
      - "./init-postgres.sh:/docker-entrypoint-initdb.d/init.sh"
      - "./meta.sr.ht/schema.sql:/data/meta.sr.ht.sql"
      - "./todo.sr.ht/schema.sql:/data/todo.sr.ht.sql"
  meta-api:
    <<: *srht-service
    build:
      target: meta.sr.ht
    develop:
      watch:
        - path: meta.sr.ht/api
          action: rebuild
    depends_on:
      - redis
      - postgres
    ports:
      - "5100:5100"
    command: /src/meta.sr.ht/api/api
  meta:
    <<: *srht-service
    build:
      target: meta.sr.ht
    develop:
      watch:
        - path: meta.sr.ht/metasrht
          action: sync
          target: /src/meta.sr.ht/metasrht
    depends_on:
      - redis
      - postgres
      - meta-api
    ports:
      - "5000:5000"
    command: flask --app metasrht.app:app --debug run --host=0.0.0.0 --port=5000
  todo-api:
    <<: *srht-service
    build:
      target: todo.sr.ht
    depends_on:
      - redis
      - postgres
    develop:
      watch:
        - path: todo.sr.ht/api
          action: rebuild
    ports:
      - "5103:5103"
    command: /src/todo.sr.ht/api/api
  todo:
    <<: *srht-service
    build:
      target: todo.sr.ht
    develop:
      watch:
        - path: todo.sr.ht/todosrht
          action: sync
          target: /src/todo.sr.ht/todosrht
    depends_on:
      - redis
      - postgres
      - todo-api
    ports:
      - "5003:5003"
    # TODO: todo needs to communicate with meta's OAuth server, socat is a workaround
    command: sh -c "
      socat -d TCP4-LISTEN:5000,fork TCP4:meta:5000,forever &
      flask --app todosrht.app:app --debug run --host=0.0.0.0 --port=5003"
